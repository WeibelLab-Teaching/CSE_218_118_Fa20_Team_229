"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionSchema = void 0;
var ChangeTree_1 = require("../changes/ChangeTree");
var spec_1 = require("../spec");
var Schema_1 = require("../Schema");
var _1 = require(".");
var CollectionSchema = /** @class */ (function () {
    function CollectionSchema(initialValues) {
        var _this = this;
        this.$changes = new ChangeTree_1.ChangeTree(this);
        this.$items = new Map();
        this.$indexes = new Map();
        this.$refId = 0;
        if (initialValues) {
            initialValues.forEach(function (v) { return _this.add(v); });
        }
    }
    CollectionSchema.is = function (type) {
        return type['collection'] !== undefined;
    };
    CollectionSchema.prototype.add = function (value) {
        // set "index" for reference.
        var index = this.$refId++;
        var isRef = (value['$changes']) !== undefined;
        if (isRef) {
            value['$changes'].setParent(this, this.$changes.root, index);
        }
        this.$changes.indexes[index] = index;
        this.$indexes.set(index, index);
        this.$items.set(index, value);
        this.$changes.change(index);
        return index;
    };
    CollectionSchema.prototype.at = function (index) {
        var key = Array.from(this.$items.keys())[index];
        return this.$items.get(key);
    };
    CollectionSchema.prototype.entries = function () {
        return this.$items.entries();
    };
    CollectionSchema.prototype.delete = function (item) {
        var entries = this.$items.entries();
        var index;
        var entry;
        while (entry = entries.next()) {
            if (entry.done) {
                break;
            }
            if (item === entry.value[1]) {
                index = entry.value[0];
                break;
            }
        }
        if (index === undefined) {
            return false;
        }
        this.$changes.delete(index);
        this.$indexes.delete(index);
        return this.$items.delete(index);
    };
    CollectionSchema.prototype.clear = function (isDecoding) {
        var _this = this;
        // discard previous operations.
        this.$changes.discard(true, true);
        this.$changes.indexes = {};
        // clear previous indexes
        this.$indexes.clear();
        // flag child items for garbage collection.
        if (isDecoding && typeof (this.$changes.getType()) !== "string") {
            this.$items.forEach(function (item) {
                _this.$changes.root.removeRef(item['$changes'].refId);
            });
        }
        // clear items
        this.$items.clear();
        this.$changes.operation({ index: 0, op: spec_1.OPERATION.CLEAR });
        // touch all structures until reach root
        this.$changes.touchParents();
    };
    CollectionSchema.prototype.has = function (value) {
        return Array.from(this.$items.values()).some(function (v) { return v === value; });
    };
    CollectionSchema.prototype.forEach = function (callbackfn) {
        var _this = this;
        this.$items.forEach(function (value, key, _) { return callbackfn(value, key, _this); });
    };
    CollectionSchema.prototype.values = function () {
        return this.$items.values();
    };
    Object.defineProperty(CollectionSchema.prototype, "size", {
        get: function () {
            return this.$items.size;
        },
        enumerable: false,
        configurable: true
    });
    CollectionSchema.prototype.setIndex = function (index, key) {
        this.$indexes.set(index, key);
    };
    CollectionSchema.prototype.getIndex = function (index) {
        return this.$indexes.get(index);
    };
    CollectionSchema.prototype.getByIndex = function (index) {
        return this.$items.get(this.$indexes.get(index));
    };
    CollectionSchema.prototype.deleteByIndex = function (index) {
        var key = this.$indexes.get(index);
        this.$items.delete(key);
        this.$indexes.delete(index);
    };
    CollectionSchema.prototype.toArray = function () {
        return Array.from(this.$items.values());
    };
    CollectionSchema.prototype.toJSON = function () {
        var values = [];
        this.forEach(function (value, key) {
            values.push((typeof (value['toJSON']) === "function")
                ? value['toJSON']()
                : value);
        });
        return values;
    };
    //
    // Decoding utilities
    //
    CollectionSchema.prototype.clone = function (isDecoding) {
        var cloned;
        if (isDecoding) {
            // client-side
            cloned = Object.assign(new CollectionSchema(), this);
        }
        else {
            // server-side
            var cloned_1 = new CollectionSchema();
            this.forEach(function (value) {
                if (value['$changes']) {
                    cloned_1.add(value['clone']());
                }
                else {
                    cloned_1.add(value);
                }
            });
        }
        return cloned;
    };
    CollectionSchema.prototype.triggerAll = function () {
        Schema_1.Schema.prototype.triggerAll.apply(this);
    };
    return CollectionSchema;
}());
exports.CollectionSchema = CollectionSchema;
_1.registerType("collection", {
    constructor: CollectionSchema,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGVjdGlvblNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9Db2xsZWN0aW9uU2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUFtRDtBQUNuRCxnQ0FBb0M7QUFDcEMsb0NBQTJEO0FBQzNELHNCQUFpQztBQUlqQztJQW1CSSwwQkFBYSxhQUF3QjtRQUFyQyxpQkFJQztRQXRCUyxhQUFRLEdBQWUsSUFBSSx1QkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTVDLFdBQU0sR0FBbUIsSUFBSSxHQUFHLEVBQWEsQ0FBQztRQUM5QyxhQUFRLEdBQXdCLElBQUksR0FBRyxFQUFrQixDQUFDO1FBRTFELFdBQU0sR0FBVyxDQUFDLENBQUM7UUFjekIsSUFBSSxhQUFhLEVBQUU7WUFDZixhQUFhLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQztTQUM3QztJQUNMLENBQUM7SUFSTSxtQkFBRSxHQUFULFVBQVUsSUFBUztRQUNmLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUM1QyxDQUFDO0lBUUQsOEJBQUcsR0FBSCxVQUFJLEtBQVE7UUFDUiw2QkFBNkI7UUFDN0IsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTVCLElBQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDO1FBQ2hELElBQUksS0FBSyxFQUFFO1lBQ04sS0FBSyxDQUFDLFVBQVUsQ0FBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2hGO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFD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Q0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDckI7WUFDTCxDQUFDLENBQUMsQ0FBQTtTQUNMO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELHFDQUFVLEdBQVY7UUFDSSxlQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0FBQyxBQXJMRCxJQXFMQztBQXJMWSw0Q0FBZ0I7QUF1TDdCLGVBQVksQ0FBQyxZQUFZLEVBQUU7SUFDdkIsV0FBVyxFQUFFLGdCQUFnQjtDQUNoQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VUcmVlIH0gZnJvbSBcIi4uL2NoYW5nZXMvQ2hhbmdlVHJlZVwiO1xuaW1wb3J0IHsgT1BFUkFUSU9OIH0gZnJvbSBcIi4uL3NwZWNcIjtcbmltcG9ydCB7IFNjaGVtYURlY29kZXJDYWxsYmFja3MsIFNjaGVtYSB9IGZyb20gXCIuLi9TY2hlbWFcIjtcbmltcG9ydCB7IHJlZ2lzdGVyVHlwZSB9IGZyb20gXCIuXCI7XG5cbnR5cGUgSyA9IG51bWJlcjsgLy8gVE9ETzogYWxsb3cgdG8gc3BlY2lmeSBLIGdlbmVyaWMgb24gTWFwU2NoZW1hLlxuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvblNjaGVtYTxWPWFueT4gaW1wbGVtZW50cyBTY2hlbWFEZWNvZGVyQ2FsbGJhY2tzIHtcbiAgICBwcm90ZWN0ZWQgJGNoYW5nZXM6IENoYW5nZVRyZWUgPSBuZXcgQ2hhbmdlVHJlZSh0aGlzKTtcblxuICAgIHByb3RlY3RlZCAkaXRlbXM6IE1hcDxudW1iZXIsIFY+ID0gbmV3IE1hcDxudW1iZXIsIFY+KCk7XG4gICAgcHJvdGVjdGVkICRpbmRleGVzOiBNYXA8bnVtYmVyLCBudW1iZXI+ID0gbmV3IE1hcDxudW1iZXIsIG51bWJlcj4oKTtcblxuICAgIHByb3RlY3RlZCAkcmVmSWQ6IG51bWJlciA9IDA7XG5cbiAgICAvL1xuICAgIC8vIERlY29kaW5nIGNhbGxiYWNrc1xuICAgIC8vXG4gICAgcHVibGljIG9uQWRkPzogKGl0ZW06IFYsIGtleTogbnVtYmVyKSA9PiB2b2lkO1xuICAgIHB1YmxpYyBvblJlbW92ZT86IChpdGVtOiBWLCBrZXk6IG51bWJlcikgPT4gdm9pZDtcbiAgICBwdWJsaWMgb25DaGFuZ2U/OiAoaXRlbTogViwga2V5OiBudW1iZXIpID0+IHZvaWQ7XG5cbiAgICBzdGF0aWMgaXModHlwZTogYW55KSB7XG4gICAgICAgIHJldHVybiB0eXBlWydjb2xsZWN0aW9uJ10gIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvciAoaW5pdGlhbFZhbHVlcz86IEFycmF5PFY+KSB7XG4gICAgICAgIGlmIChpbml0aWFsVmFsdWVzKSB7XG4gICAgICAgICAgICBpbml0aWFsVmFsdWVzLmZvckVhY2goKHYpID0+IHRoaXMuYWRkKHYpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZCh2YWx1ZTogVikge1xuICAgICAgICAvLyBzZXQgXCJpbmRleFwiIGZvciByZWZlcmVuY2UuXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy4kcmVmSWQrKztcblxuICAgICAgICBjb25zdCBpc1JlZiA9ICh2YWx1ZVsnJGNoYW5nZXMnXSkgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGlzUmVmKSB7XG4gICAgICAgICAgICAodmFsdWVbJyRjaGFuZ2VzJ10gYXMgQ2hhbmdlVHJlZSkuc2V0UGFyZW50KHRoaXMsIHRoaXMuJGNoYW5nZXMucm9vdCwgaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kY2hhbmdlcy5pbmRleGVzW2luZGV4XSA9IGluZGV4O1xuXG4gICAgICAgIHRoaXMuJGluZGV4ZXMuc2V0KGluZGV4LCBpbmRleCk7XG4gICAgICAgIHRoaXMuJGl0ZW1zLnNldChpbmRleCwgdmFsdWUpO1xuXG4gICAgICAgIHRoaXMuJGNoYW5nZXMuY2hhbmdlKGluZGV4KTtcblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuXG4gICAgYXQoaW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBrZXkgPSBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLmtleXMoKSlbaW5kZXhdO1xuICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgZW50cmllcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmVudHJpZXMoKTtcbiAgICB9XG5cbiAgICBkZWxldGUoaXRlbTogVikge1xuICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy4kaXRlbXMuZW50cmllcygpO1xuXG4gICAgICAgIGxldCBpbmRleDogSztcbiAgICAgICAgbGV0IGVudHJ5OiBJdGVyYXRvclJlc3VsdDxbbnVtYmVyLCBWXT47XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJpZXMubmV4dCgpKSB7XG4gICAgICAgICAgICBpZiAoZW50cnkuZG9uZSkgeyBicmVhazsgfVxuXG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW50cnkudmFsdWVbMV0pIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGVudHJ5LnZhbHVlWzBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJGNoYW5nZXMuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgdGhpcy4kaW5kZXhlcy5kZWxldGUoaW5kZXgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLiRpdGVtcy5kZWxldGUoaW5kZXgpO1xuICAgIH1cblxuICAgIGNsZWFyKGlzRGVjb2Rpbmc/OiBib29sZWFuKSB7XG4gICAgICAgIC8vIGRpc2NhcmQgcHJldmlvdXMgb3BlcmF0aW9ucy5cbiAgICAgICAgdGhpcy4kY2hhbmdlcy5kaXNjYXJkKHRydWUsIHRydWUpO1xuICAgICAgICB0aGlzLiRjaGFuZ2VzLmluZGV4ZXMgPSB7fTtcblxuICAgICAgICAvLyBjbGVhciBwcmV2aW91cyBpbmRleGVzXG4gICAgICAgIHRoaXMuJGluZGV4ZXMuY2xlYXIoKTtcblxuICAgICAgICAvLyBmbGFnIGNoaWxkIGl0ZW1zIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gICAgICAgIGlmIChpc0RlY29kaW5nICYmIHR5cGVvZiAodGhpcy4kY2hhbmdlcy5nZXRUeXBlKCkpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLiRpdGVtcy5mb3JFYWNoKChpdGVtOiBWKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5yb290LnJlbW92ZVJlZihpdGVtWyckY2hhbmdlcyddLnJlZklkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgaXRlbXNcbiAgICAgICAgdGhpcy4kaXRlbXMuY2xlYXIoKTtcblxuICAgICAgICB0aGlzLiRjaGFuZ2VzLm9wZXJhdGlvbih7IGluZGV4OiAwLCBvcDogT1BFUkFUSU9OLkNMRUFSIH0pO1xuXG4gICAgICAgIC8vIHRvdWNoIGFsbCBzdHJ1Y3R1cmVzIHVudGlsIHJlYWNoIHJvb3RcbiAgICAgICAgdGhpcy4kY2hhbmdlcy50b3VjaFBhcmVudHMoKTtcbiAgICB9XG5cbiAgICBoYXMgKHZhbHVlOiBWKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLnZhbHVlcygpKS5zb21lKCh2KSA9PiB2ID09PSB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9yRWFjaChjYWxsYmFja2ZuOiAodmFsdWU6IFYsIGtleTogSywgY29sbGVjdGlvbjogQ29sbGVjdGlvblNjaGVtYTxWPikgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLiRpdGVtcy5mb3JFYWNoKCh2YWx1ZSwga2V5LCBfKSA9PiBjYWxsYmFja2ZuKHZhbHVlLCBrZXksIHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRpdGVtcy52YWx1ZXMoKTtcbiAgICB9XG5cbiAgICBnZXQgc2l6ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRpdGVtcy5zaXplO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRJbmRleChpbmRleDogbnVtYmVyLCBrZXk6IG51bWJlcikge1xuICAgICAgICB0aGlzLiRpbmRleGVzLnNldChpbmRleCwga2V5KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0SW5kZXgoaW5kZXg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy4kaW5kZXhlcy5nZXQoaW5kZXgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRCeUluZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmdldCh0aGlzLiRpbmRleGVzLmdldChpbmRleCkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBkZWxldGVCeUluZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy4kaW5kZXhlcy5nZXQoaW5kZXgpO1xuICAgICAgICB0aGlzLiRpdGVtcy5kZWxldGUoa2V5KTtcbiAgICAgICAgdGhpcy4kaW5kZXhlcy5kZWxldGUoaW5kZXgpO1xuICAgIH1cblxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLnZhbHVlcygpKTtcbiAgICB9XG5cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlczogVltdID0gW107XG5cbiAgICAgICAgdGhpcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChcbiAgICAgICAgICAgICAgICAodHlwZW9mICh2YWx1ZVsndG9KU09OJ10pID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgID8gdmFsdWVbJ3RvSlNPTiddKClcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIERlY29kaW5nIHV0aWxpdGllc1xuICAgIC8vXG4gICAgY2xvbmUoaXNEZWNvZGluZz86IGJvb2xlYW4pOiBDb2xsZWN0aW9uU2NoZW1hPFY+IHtcbiAgICAgICAgbGV0IGNsb25lZDogQ29sbGVjdGlvblNjaGVtYTtcblxuICAgICAgICBpZiAoaXNEZWNvZGluZykge1xuICAgICAgICAgICAgLy8gY2xpZW50LXNpZGVcbiAgICAgICAgICAgIGNsb25lZCA9IE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb25TY2hlbWEoKSwgdGhpcyk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNlcnZlci1zaWRlXG4gICAgICAgICAgICBjb25zdCBjbG9uZWQgPSBuZXcgQ29sbGVjdGlvblNjaGVtYSgpO1xuICAgICAgICAgICAgdGhpcy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVsnJGNoYW5nZXMnXSkge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuYWRkKHZhbHVlWydjbG9uZSddKCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lZC5hZGQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cblxuICAgIHRyaWdnZXJBbGwgKCk6IHZvaWQge1xuICAgICAgICBTY2hlbWEucHJvdG90eXBlLnRyaWdnZXJBbGwuYXBwbHkodGhpcyk7XG4gICAgfVxufVxuXG5yZWdpc3RlclR5cGUoXCJjb2xsZWN0aW9uXCIsIHtcbiAgICBjb25zdHJ1Y3RvcjogQ29sbGVjdGlvblNjaGVtYSxcbn0pO1xuIl19
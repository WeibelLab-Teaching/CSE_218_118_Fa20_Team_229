"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionSchema = void 0;
var ChangeTree_1 = require("../changes/ChangeTree");
var spec_1 = require("../spec");
var Schema_1 = require("../Schema");
var CollectionSchema = /** @class */ (function () {
    function CollectionSchema(initialValues) {
        var _this = this;
        this.$changes = new ChangeTree_1.ChangeTree(this);
        this.$items = new Map();
        this.$indexes = new Map();
        this.$refId = 0;
        if (initialValues) {
            initialValues.forEach(function (v) { return _this.add(v); });
        }
    }
    CollectionSchema.is = function (type) {
        return type['collection'] !== undefined;
    };
    CollectionSchema.prototype.add = function (value) {
        // set "index" for reference.
        var index = this.$refId++;
        var isRef = (value['$changes']) !== undefined;
        if (isRef) {
            value['$changes'].setParent(this, this.$changes.root, index);
        }
        this.$changes.indexes[index] = index;
        this.$indexes.set(index, index);
        this.$items.set(index, value);
        this.$changes.change(index);
        return index;
    };
    CollectionSchema.prototype.at = function (index) {
        var key = Array.from(this.$items.keys())[index];
        return this.$items.get(key);
    };
    CollectionSchema.prototype.entries = function () {
        return this.$items.entries();
    };
    CollectionSchema.prototype.delete = function (item) {
        var entries = this.$items.entries();
        var index;
        var entry;
        while (entry = entries.next()) {
            if (entry.done) {
                break;
            }
            if (item === entry.value[1]) {
                index = entry.value[0];
                break;
            }
        }
        if (index === undefined) {
            return false;
        }
        this.$changes.delete(index);
        this.$indexes.delete(index);
        return this.$items.delete(index);
    };
    CollectionSchema.prototype.clear = function (isDecoding) {
        var _this = this;
        // discard previous operations.
        this.$changes.discard(true, true);
        this.$changes.indexes = {};
        // clear previous indexes
        this.$indexes.clear();
        // flag child items for garbage collection.
        if (isDecoding && typeof (this.$changes.getType()) !== "string") {
            this.$items.forEach(function (item) {
                _this.$changes.root.removeRef(item['$changes'].refId);
            });
        }
        // clear items
        this.$items.clear();
        this.$changes.operation({ index: 0, op: spec_1.OPERATION.CLEAR });
        // touch all structures until reach root
        this.$changes.touchParents();
    };
    CollectionSchema.prototype.has = function (value) {
        return Array.from(this.$items.values()).some(function (v) { return v === value; });
    };
    CollectionSchema.prototype.forEach = function (callbackfn) {
        var _this = this;
        this.$items.forEach(function (value, key, _) { return callbackfn(value, key, _this); });
    };
    CollectionSchema.prototype.values = function () {
        return this.$items.values();
    };
    Object.defineProperty(CollectionSchema.prototype, "size", {
        get: function () {
            return this.$items.size;
        },
        enumerable: false,
        configurable: true
    });
    CollectionSchema.prototype.setIndex = function (index, key) {
        this.$indexes.set(index, key);
    };
    CollectionSchema.prototype.getIndex = function (index) {
        return this.$indexes.get(index);
    };
    CollectionSchema.prototype.getByIndex = function (index) {
        return this.$items.get(this.$indexes.get(index));
    };
    CollectionSchema.prototype.deleteByIndex = function (index) {
        var key = this.$indexes.get(index);
        this.$items.delete(key);
        this.$indexes.delete(index);
    };
    CollectionSchema.prototype.toArray = function () {
        return Array.from(this.$items.values());
    };
    CollectionSchema.prototype.toJSON = function () {
        var values = [];
        this.forEach(function (value, key) {
            values.push((typeof (value['toJSON']) === "function")
                ? value['toJSON']()
                : value);
        });
        return values;
    };
    //
    // Decoding utilities
    //
    CollectionSchema.prototype.clone = function (isDecoding) {
        var cloned;
        if (isDecoding) {
            // client-side
            cloned = Object.assign(new CollectionSchema(), this);
        }
        else {
            // server-side
            var cloned_1 = new CollectionSchema();
            this.forEach(function (value) {
                if (value['$changes']) {
                    cloned_1.add(value['clone']());
                }
                else {
                    cloned_1.add(value);
                }
            });
        }
        return cloned;
    };
    CollectionSchema.prototype.triggerAll = function () {
        Schema_1.Schema.prototype.triggerAll.apply(this);
    };
    return CollectionSchema;
}());
exports.CollectionSchema = CollectionSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGVjdGlvblNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9Db2xsZWN0aW9uU2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUFtRDtBQUNuRCxnQ0FBb0M7QUFDcEMsb0NBQTJEO0FBSTNEO0lBbUJJLDBCQUFhLGFBQXdCO1FBQXJDLGlCQUlDO1FBdEJTLGFBQVEsR0FBZSxJQUFJLHVCQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFNUMsV0FBTSxHQUFtQixJQUFJLEdBQUcsRUFBYSxDQUFDO1FBQzlDLGFBQVEsR0FBd0IsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFFMUQsV0FBTSxHQUFXLENBQUMsQ0FBQztRQWN6QixJQUFJLGFBQWEsRUFBRTtZQUNmLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO1NBQzdDO0lBQ0wsQ0FBQztJQVJNLG1CQUFFLEdBQVQsVUFBVSxJQUFTO1FBQ2YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssU0FBUyxDQUFDO0lBQzVDLENBQUM7SUFRRCw4QkFBRyxHQUFILFVBQUksS0FBUTtRQUNSLDZCQUE2QjtRQUM3QixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFNUIsSUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUM7UUFDaEQsSUFBSSxLQUFLLEVBQUU7WUFDTixLQUFLLENBQUMsVUFBVSxDQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDaEY7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFFckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU1QixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsNkJBQUUsR0FBRixVQUFHLEtBQWE7UUFDWixJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxrQ0FBTyxHQUFQO1FBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxpQ0FBTSxHQUFOLFVBQU8sSUFBTztRQUNWLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFdEMsSUFBSSxLQUFRLENBQUM7UUFDYixJQUFJLEtBQWtDLENBQUM7UUFDdkMsT0FBTyxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzNCLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtnQkFBRSxNQUFNO2FBQUU7WUFFMUIsSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekIsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLE1BQU07YUFDVDtTQUNKO1FBRUQsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3JCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsZ0NBQUssR0FBTCxVQUFNLFVBQW9CO1FBQTFCLGlCQXNCQztRQXJCRywrQkFBK0I7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUUzQix5QkFBeUI7UUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUV0QiwyQ0FBMkM7UUFDM0MsSUFBSSxVQUFVLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDN0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFPO2dCQUN4QixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pELENBQUMsQ0FBQyxDQUFDO1NBQ047UUFFRCxjQUFjO1FBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVwQixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLGdCQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUUzRCx3Q0FBd0M7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRUQsOEJBQUcsR0FBSCxVQUFLLEtBQVE7UUFDVCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsS0FBSyxLQUFLLEVBQVgsQ0FBVyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELGtDQUFPLEdBQVAsVUFBUSxVQUF1RTtRQUEvRSxpQkFFQztRQURHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUssT0FBQSxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFJLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRCxpQ0FBTSxHQUFOO1FBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxzQkFBSSxrQ0FBSTthQUFSO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQUVTLG1DQUFRLEdBQWxCLFVBQW1CLEtBQWEsRUFBRSxHQUFXO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRVMsbUNBQVEsR0FBbEIsVUFBbUIsS0FBYTtRQUM1QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFUyxxQ0FBVSxHQUFwQixVQUFxQixLQUFhO1FBQzlCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRVMsd0NBQWEsR0FBdkIsVUFBd0IsS0FBYTtRQUNqQyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsa0NBQU8sR0FBUDtRQUNJLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGlDQUFNLEdBQU47UUFDSSxJQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFFdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssRUFBRSxHQUFHO1lBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQ1AsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssVUFBVSxDQUFDO2dCQUNyQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNuQixDQUFDLENBQUMsS0FBSyxDQUNkLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxFQUFFO0lBQ0YscUJBQXFCO0lBQ3JCLEVBQUU7SUFDRixnQ0FBSyxHQUFMLFVBQU0sVUFBb0I7UUFDdEIsSUFBSSxNQUF3QixDQUFDO1FBRTdCLElBQUksVUFBVSxFQUFFO1lBQ1osY0FBYztZQUNkLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksZ0JBQWdCLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUV4RDthQUFNO1lBQ0gsY0FBYztZQUNkLElBQU0sUUFBTSxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSztnQkFDZixJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDbkIsUUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUNoQztxQkFBTTtvQkFDSCxRQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNyQjtZQUNMLENBQUMsQ0FBQyxDQUFBO1NBQ0w7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQscUNBQVUsR0FBVjtRQUNJLGVBQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQUFDLEFBckxELElBcUxDO0FBckxZLDRDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZVRyZWUgfSBmcm9tIFwiLi4vY2hhbmdlcy9DaGFuZ2VUcmVlXCI7XG5pbXBvcnQgeyBPUEVSQVRJT04gfSBmcm9tIFwiLi4vc3BlY1wiO1xuaW1wb3J0IHsgU2NoZW1hRGVjb2RlckNhbGxiYWNrcywgU2NoZW1hIH0gZnJvbSBcIi4uL1NjaGVtYVwiO1xuXG50eXBlIEsgPSBudW1iZXI7IC8vIFRPRE86IGFsbG93IHRvIHNwZWNpZnkgSyBnZW5lcmljIG9uIE1hcFNjaGVtYS5cblxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb25TY2hlbWE8Vj1hbnk+IGltcGxlbWVudHMgU2NoZW1hRGVjb2RlckNhbGxiYWNrcyB7XG4gICAgcHJvdGVjdGVkICRjaGFuZ2VzOiBDaGFuZ2VUcmVlID0gbmV3IENoYW5nZVRyZWUodGhpcyk7XG5cbiAgICBwcm90ZWN0ZWQgJGl0ZW1zOiBNYXA8bnVtYmVyLCBWPiA9IG5ldyBNYXA8bnVtYmVyLCBWPigpO1xuICAgIHByb3RlY3RlZCAkaW5kZXhlczogTWFwPG51bWJlciwgbnVtYmVyPiA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCk7XG5cbiAgICBwcm90ZWN0ZWQgJHJlZklkOiBudW1iZXIgPSAwO1xuXG4gICAgLy9cbiAgICAvLyBEZWNvZGluZyBjYWxsYmFja3NcbiAgICAvL1xuICAgIHB1YmxpYyBvbkFkZD86IChpdGVtOiBWLCBrZXk6IG51bWJlcikgPT4gdm9pZDtcbiAgICBwdWJsaWMgb25SZW1vdmU/OiAoaXRlbTogViwga2V5OiBudW1iZXIpID0+IHZvaWQ7XG4gICAgcHVibGljIG9uQ2hhbmdlPzogKGl0ZW06IFYsIGtleTogbnVtYmVyKSA9PiB2b2lkO1xuXG4gICAgc3RhdGljIGlzKHR5cGU6IGFueSkge1xuICAgICAgICByZXR1cm4gdHlwZVsnY29sbGVjdGlvbiddICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IgKGluaXRpYWxWYWx1ZXM/OiBBcnJheTxWPikge1xuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlcykge1xuICAgICAgICAgICAgaW5pdGlhbFZhbHVlcy5mb3JFYWNoKCh2KSA9PiB0aGlzLmFkZCh2KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGQodmFsdWU6IFYpIHtcbiAgICAgICAgLy8gc2V0IFwiaW5kZXhcIiBmb3IgcmVmZXJlbmNlLlxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuJHJlZklkKys7XG5cbiAgICAgICAgY29uc3QgaXNSZWYgPSAodmFsdWVbJyRjaGFuZ2VzJ10pICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChpc1JlZikge1xuICAgICAgICAgICAgKHZhbHVlWyckY2hhbmdlcyddIGFzIENoYW5nZVRyZWUpLnNldFBhcmVudCh0aGlzLCB0aGlzLiRjaGFuZ2VzLnJvb3QsIGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJGNoYW5nZXMuaW5kZXhlc1tpbmRleF0gPSBpbmRleDtcblxuICAgICAgICB0aGlzLiRpbmRleGVzLnNldChpbmRleCwgaW5kZXgpO1xuICAgICAgICB0aGlzLiRpdGVtcy5zZXQoaW5kZXgsIHZhbHVlKTtcblxuICAgICAgICB0aGlzLiRjaGFuZ2VzLmNoYW5nZShpbmRleCk7XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cblxuICAgIGF0KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy5rZXlzKCkpW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmdldChrZXkpO1xuICAgIH1cblxuICAgIGVudHJpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRpdGVtcy5lbnRyaWVzKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlKGl0ZW06IFYpIHtcbiAgICAgICAgY29uc3QgZW50cmllcyA9IHRoaXMuJGl0ZW1zLmVudHJpZXMoKTtcblxuICAgICAgICBsZXQgaW5kZXg6IEs7XG4gICAgICAgIGxldCBlbnRyeTogSXRlcmF0b3JSZXN1bHQ8W251bWJlciwgVl0+O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyaWVzLm5leHQoKSkge1xuICAgICAgICAgICAgaWYgKGVudHJ5LmRvbmUpIHsgYnJlYWs7IH1cblxuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IGVudHJ5LnZhbHVlWzFdKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBlbnRyeS52YWx1ZVswXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiRjaGFuZ2VzLmRlbGV0ZShpbmRleCk7XG4gICAgICAgIHRoaXMuJGluZGV4ZXMuZGVsZXRlKGluZGV4KTtcblxuICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuZGVsZXRlKGluZGV4KTtcbiAgICB9XG5cbiAgICBjbGVhcihpc0RlY29kaW5nPzogYm9vbGVhbikge1xuICAgICAgICAvLyBkaXNjYXJkIHByZXZpb3VzIG9wZXJhdGlvbnMuXG4gICAgICAgIHRoaXMuJGNoYW5nZXMuZGlzY2FyZCh0cnVlLCB0cnVlKTtcbiAgICAgICAgdGhpcy4kY2hhbmdlcy5pbmRleGVzID0ge307XG5cbiAgICAgICAgLy8gY2xlYXIgcHJldmlvdXMgaW5kZXhlc1xuICAgICAgICB0aGlzLiRpbmRleGVzLmNsZWFyKCk7XG5cbiAgICAgICAgLy8gZmxhZyBjaGlsZCBpdGVtcyBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgICAgICBpZiAoaXNEZWNvZGluZyAmJiB0eXBlb2YgKHRoaXMuJGNoYW5nZXMuZ2V0VHlwZSgpKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy4kaXRlbXMuZm9yRWFjaCgoaXRlbTogVikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMucm9vdC5yZW1vdmVSZWYoaXRlbVsnJGNoYW5nZXMnXS5yZWZJZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIGl0ZW1zXG4gICAgICAgIHRoaXMuJGl0ZW1zLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy4kY2hhbmdlcy5vcGVyYXRpb24oeyBpbmRleDogMCwgb3A6IE9QRVJBVElPTi5DTEVBUiB9KTtcblxuICAgICAgICAvLyB0b3VjaCBhbGwgc3RydWN0dXJlcyB1bnRpbCByZWFjaCByb290XG4gICAgICAgIHRoaXMuJGNoYW5nZXMudG91Y2hQYXJlbnRzKCk7XG4gICAgfVxuXG4gICAgaGFzICh2YWx1ZTogVik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSkuc29tZSgodikgPT4gdiA9PT0gdmFsdWUpO1xuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2tmbjogKHZhbHVlOiBWLCBrZXk6IEssIGNvbGxlY3Rpb246IENvbGxlY3Rpb25TY2hlbWE8Vj4pID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy4kaXRlbXMuZm9yRWFjaCgodmFsdWUsIGtleSwgXykgPT4gY2FsbGJhY2tmbih2YWx1ZSwga2V5LCB0aGlzKSk7XG4gICAgfVxuXG4gICAgdmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMudmFsdWVzKCk7XG4gICAgfVxuXG4gICAgZ2V0IHNpemUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuc2l6ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2V0SW5kZXgoaW5kZXg6IG51bWJlciwga2V5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy4kaW5kZXhlcy5zZXQoaW5kZXgsIGtleSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEluZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGluZGV4ZXMuZ2V0KGluZGV4KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0QnlJbmRleChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRpdGVtcy5nZXQodGhpcy4kaW5kZXhlcy5nZXQoaW5kZXgpKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZGVsZXRlQnlJbmRleChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuJGluZGV4ZXMuZ2V0KGluZGV4KTtcbiAgICAgICAgdGhpcy4kaXRlbXMuZGVsZXRlKGtleSk7XG4gICAgICAgIHRoaXMuJGluZGV4ZXMuZGVsZXRlKGluZGV4KTtcbiAgICB9XG5cbiAgICB0b0FycmF5KCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSk7XG4gICAgfVxuXG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCB2YWx1ZXM6IFZbXSA9IFtdO1xuXG4gICAgICAgIHRoaXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goXG4gICAgICAgICAgICAgICAgKHR5cGVvZiAodmFsdWVbJ3RvSlNPTiddKSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA/IHZhbHVlWyd0b0pTT04nXSgpXG4gICAgICAgICAgICAgICAgICAgIDogdmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBEZWNvZGluZyB1dGlsaXRpZXNcbiAgICAvL1xuICAgIGNsb25lKGlzRGVjb2Rpbmc/OiBib29sZWFuKTogQ29sbGVjdGlvblNjaGVtYTxWPiB7XG4gICAgICAgIGxldCBjbG9uZWQ6IENvbGxlY3Rpb25TY2hlbWE7XG5cbiAgICAgICAgaWYgKGlzRGVjb2RpbmcpIHtcbiAgICAgICAgICAgIC8vIGNsaWVudC1zaWRlXG4gICAgICAgICAgICBjbG9uZWQgPSBPYmplY3QuYXNzaWduKG5ldyBDb2xsZWN0aW9uU2NoZW1hKCksIHRoaXMpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZXJ2ZXItc2lkZVxuICAgICAgICAgICAgY29uc3QgY2xvbmVkID0gbmV3IENvbGxlY3Rpb25TY2hlbWEoKTtcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVbJyRjaGFuZ2VzJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVkLmFkZCh2YWx1ZVsnY2xvbmUnXSgpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuYWRkKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9XG5cbiAgICB0cmlnZ2VyQWxsICgpOiB2b2lkIHtcbiAgICAgICAgU2NoZW1hLnByb3RvdHlwZS50cmlnZ2VyQWxsLmFwcGx5KHRoaXMpO1xuICAgIH1cbn1cbiJdfQ==